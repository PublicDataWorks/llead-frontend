---
orbs:
  gcp-cli: circleci/gcp-cli@3.0.1
  gcp-gke: circleci/gcp-gke@2.0.0
  browser-tools: circleci/browser-tools@1.4.1

defaults:
  - &gcloud-env
    PROJECT_NAME: 'IPNO'
    GOOGLE_PROJECT_ID: 'excellent-zoo-300106'
    GOOGLE_COMPUTE_ZONE: 'us-central1-a'
    GOOGLE_CLUSTER_NAME: 'ipno'
  - &set-push-env
    USER_NAME: 'East Agile'
    USER_EMAIL: 'open-source@eastagile.com'
    DESTINATION_REPOSITORY_USERNAME: 'PublicDataWorks'
    DESTINATION_REPOSITORY_NAME: 'llead-frontend'
  - &set-gcloud-service-key
    command: |
      echo 'export GCLOUD_SERVICE_KEY=$(echo $GCLOUD_SERVICE_KEY_BASE64 | base64 -d)' >> $BASH_ENV
  - &set-deploy-env
    name: Set deployment env
    command: |
      if [ $CIRCLE_BRANCH == "main" ]
      then
        echo 'export NAMESPACE_ENV=ipno-production' >> $BASH_ENV
        echo 'export DOCKER_PRETAG=frontend-production' >> $BASH_ENV
        echo 'export BUILD_ENV=production' >> $BASH_ENV
        echo 'export GA_MEASUREMENT_ID=$GA_MEASUREMENT_ID' >> $BASH_ENV
      else
        echo 'export NAMESPACE_ENV=ipno-staging' >> $BASH_ENV
        echo 'export DOCKER_PRETAG=frontend-staging' >> $BASH_ENV
        echo 'export BUILD_ENV=staging' >> $BASH_ENV
        echo 'export GA_MEASUREMENT_ID=$GA_STAGING_MEASUREMENT_ID' >> $BASH_ENV
      fi

version: 2.1
jobs:
  test:
    working_directory: ~/ipno_frontend
    docker:
      - image: circleci/node:fermium
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: eslint
          command: yarn lint
      - run:
          name: Tests
          command: yarn test:ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/
      - store_test_results:
          path: ./reports/
      - run:
          name: Coveralls
          command: yarn coveralls

  integration-test-non-interactive:
    working_directory: ~/ipno_frontend
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
      resource_class: large

    environment: *gcloud-env

    steps:
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - checkout
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
      - run:
          name: Setup nvm
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            nvm install && nvm use && nvm alias default $(cat .nvmrc)
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: 'Enforce nvm use default'
          command: |
            echo "nvm use default" >> $BASH_ENV
      - run:
          name: 'Install yarn'
          command: |
            npm install -g yarn
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Setup network
          command: |
            docker network create ipno
      - run:
          name: Start db
          command: |
            docker run -d --rm --network=ipno --name db-test --env-file ./test-backend.env postgres
      - run:
          name: Start elasticsearch
          command: |
            docker run -d --rm --network=ipno --name elasticsearch-itest -e discovery.type=single-node elasticsearch:7.10.1
      - gcp-cli/setup:
          components: 'gke-gcloud-auth-plugin gsutil'
      - run:
          name: Prepare for runing
          command: |
            bin/setup_be.sh
      - run:
          name: Import DB to Backend
          command: |
            docker exec -i db-test psql -U ipno ipno < data.pgsql
      - run:
          name: Integration Tests
          command: yarn itest:ci
      - store_test_results:
          path: cypress/results/
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  integration-test-interactive:
    working_directory: ~/ipno_frontend
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
      resource_class: large

    environment: *gcloud-env

    steps:
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - checkout
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
      - run:
          name: Setup nvm
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            nvm install && nvm use && nvm alias default $(cat .nvmrc)
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: 'Enforce nvm use default'
          command: |
            echo "nvm use default" >> $BASH_ENV
      - run:
          name: 'Install yarn'
          command: |
            npm install -g yarn
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Setup network
          command: |
            docker network create ipno
      - run:
          name: Start db
          command: |
            docker run -d --rm --network=ipno --name db-test --env-file ./test-backend.env postgres
      - run:
          name: Start elasticsearch
          command: |
            docker run -d --rm --network=ipno --name elasticsearch-itest -e discovery.type=single-node elasticsearch:7.10.1
      - gcp-cli/setup:
          components: 'gke-gcloud-auth-plugin gsutil'
      - run:
          name: Prepare for runing
          command: |
            bin/setup_be.sh
      - run:
          name: Import DB to Backend
          command: |
            docker exec -i db-test psql -U ipno ipno < data.pgsql
      - run:
          name: Integration Tests
          command: yarn itest:ci
          environment:
            ITEST_TYPE: interactive
      - store_test_results:
          path: cypress/results/
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  push_to_public:
    description: Push code to public repository
    machine: true
    environment: *set-push-env
    steps:
      - checkout
      - run:
          name: Push to public
          command: sh bin/public_push.sh

  push_image:
    description: Push docker image
    docker:
      - image: cimg/python:3.8.5
    environment: *gcloud-env
    steps:
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: echo "$DOCKER_PRETAG-$CIRCLE_BUILD_NUM" > buildtag
      - persist_to_workspace:
          root: .
          paths:
            - buildtag
      - run:
          name: Build image
          command: |
            docker build \
            --build-arg BUILD_ENV=$BUILD_ENV \
            --build-arg MAPBOX_KEY=${MAPBOX_KEY} \
            --build-arg GA_MEASUREMENT_ID=${GA_MEASUREMENT_ID} \
            -t ipno-frontend .
      - run:
          name: Tag image
          command: |
            docker tag ipno-frontend us.gcr.io/$GOOGLE_PROJECT_ID/ipno-frontend:$(cat buildtag)
            docker tag ipno-frontend us.gcr.io/$GOOGLE_PROJECT_ID/ipno-frontend:$DOCKER_PRETAG-latest
      - gcp-cli/setup:
          components: 'gke-gcloud-auth-plugin'
      - run:
          name: Push image
          command: |
            gcloud auth configure-docker
            docker push us.gcr.io/$GOOGLE_PROJECT_ID/ipno-frontend:$(cat buildtag)
            docker push us.gcr.io/$GOOGLE_PROJECT_ID/ipno-frontend:$DOCKER_PRETAG-latest

  deploy:
    description: Deploy application to Google Kubernetes Engine
    machine:
      image: ubuntu-2004:202010-01
    environment: *gcloud-env
    steps:
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - gcp-cli/setup:
          components: 'gke-gcloud-auth-plugin kubectl'
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          use_gke_cloud_auth_plugin: true
      - run:
          name: Deploy
          command: |
            export FRONTEND_IMAGE_TAG=$(cat /tmp/workspace/buildtag)
            cat kubernetes/frontend.yml | envsubst | kubectl apply -n $NAMESPACE_ENV -f -

workflows:
  version: 2
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - staging
                - main
                - develop
      - integration-test-non-interactive:
          requires:
            - test
      - integration-test-interactive:
          requires:
            - test

  push_to_public:
    jobs:
      - test:
          filters:
            branches:
              only:
                - develop
      - integration-test-non-interactive:
          requires:
            - test
      - integration-test-interactive:
          requires:
            - test
      - push_to_public:
          requires:
            - integration-test-non-interactive
            - integration-test-interactive

  deploy_frontend:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
                - staging
      - integration-test-non-interactive:
          requires:
            - test
      - integration-test-interactive:
          requires:
            - test
      - push_image:
          requires:
            - integration-test-non-interactive
            - integration-test-interactive
      - deploy:
          requires:
            - push_image
      - push_to_public:
          requires:
            - deploy
          filters:
            branches:
              only:
                - main
